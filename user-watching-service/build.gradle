import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.8.22'
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.9.20'
    id 'org.jetbrains.kotlin.plugin.noarg' version '1.9.20'
}

group = 'com.innercirclesoftware'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

allOpen {
    annotation 'jakarta.persistence.Entity'
    annotation 'jakarta.persistence.Embeddable'
    annotation 'jakarta.persistence.MappedSuperclass'
}

noArg {
    annotation 'jakarta.persistence.Entity'
    annotation 'jakarta.persistence.Embeddable'
    annotation 'jakarta.persistence.MappedSuperclass'
}

repositories {
    mavenCentral()
}

dependencies {
    // internal dependencies
    implementation project(':sigma-sports-scraper-api')
    implementation project(':user-watching-service-api')

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'io.arrow-kt:arrow-core:1.2.0'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'org.postgresql:postgresql:42.2.27'

    // Testing dependencies
    def kotestVersion = '5.7.2'
    testImplementation "io.kotest:kotest-runner-junit5:$kotestVersion"
    testImplementation "io.kotest:kotest-assertions-core:$kotestVersion"
    testImplementation "io.kotest.extensions:kotest-assertions-arrow:1.4.0"
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs += '-Xjsr305=strict'
        jvmTarget = '17'
    }
}

test {
    useJUnitPlatform {
        filter {
            includeTestsMatching "*Test"
            excludeTestsMatching "*IT"
        }
    }

    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

def integrationTest = tasks.register("integrationTest", Test) {
    useJUnitPlatform {
        filter {
            includeTestsMatching "*IT"
        }
    }

    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

tasks.named("check") {
    dependsOn integrationTest
}